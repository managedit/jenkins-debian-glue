* Background

jenkins-debian-glue provides scripts for building Debian packages via Jenkins (a
Continuous integration system).  It tries to minimize the required steps to get
it up and running and keep it as manageable and homogeneous as possible.

* System requirements

+ Jenkins
+ Debian
+ Cowbuilder
+ Reprepro

* Setup instructions

Jenkins jobs for a given Debian package /foobar/ are supposed to be named
/foobar-binaries/ and /foobar-source/. /foobar-source/ is the job name where
the source package is being built and /foobar-binaries/ is the job name where
the Debian binary packages are being built.

** Useful Jenkins Plugins

+ "ArtifactDeployer Plugin"
This plugin provides the option to deploy artifacts from the source job to the
binaries job. Once this plugin is installed you can enable the option
"Deploy artifacts from workspace to remote directories" inside the *-source job
with the following settings:

  :Files to deploy: *.gz,*.bz2,*.xz,*.deb,*.dsc,*.changes

  :Remote directory: ${JENKINS_HOME}/userContent/${JOB_NAME}/

+ Git Plugin

When building Debian source packages using Git the "Git plugin" provides the
according Jenkins integration.

On the build system you need git-buildpackage and a basic Git configuration for
the user under which Jenkins is running (usually being 'jenkins'):

#+BEGIN_EXAMPLE
# apt-get install git-buildpackage
# su - jenkins
% git config --global user.email "jenkins@example.org"
% git config --global user.name "Jenkins User"
#+END_EXAMPLE

+ Subversion Plugin

This plugin is shipped by Jenkins core nowadays, but to use it with Debian
packages please make sure you've subversion-tools available on the build system:

  # apt-get install subversion-tools

+ Parameterized Trigger plugin

This plugin isn't necessary but provides the "Trigger parameterized build on
other projects" option which provides a decent way for release builds. (TODO:
clarify)

** Source job configuration (foobar-source)

Choose "/This build is parameterized/" to be able to build specific
branches.

Enable and configure "/Source Code Management/", currently only Git is
supported by the /generate-git-snapshot/ script.
(NOTE: Scripts for other version control systems are highly welcome!)
*Important*: set the "/Local subdirectory for repo (optional)/" option
under /Advanced/ settings to "/source/".

Enable "/Trigger builds remotely/" and set an user-defined authentication
token.

Use /@daily/ inside "/Poll SCM/".

In the "/Build/" section add a build step "/Execute shell/" using:

#+BEGIN_EXAMPLE
/usr/bin/generate-git-snapshot auto
#+END_EXAMPLE

Under "/Post-build Actions/" select "/Archive the artifacts/" using:

#+BEGIN_EXAMPLE
*.gz,*.bz2,*.xz,*.deb,*.dsc,*.changes
#+END_EXAMPLE

Select the binaries job (/foobar-binaries/) under "/Build other
projects/" with the "/Trigger only if build succeeds/" option enabled.

For "/Files to deploy/" enable "/Deploy artifacts from workspace to
remote directories/" using:

#+BEGIN_EXAMPLE
*.gz,*.bz2,*.xz,*.deb,*.dsc,*.changes
#+END_EXAMPLE

and for the "/Remote directory/" use:

#+BEGIN_EXAMPLE
${JENKINS_HOME}/userContent/${JOB_NAME}/
#+END_EXAMPLE

Enable "/Record fingerprints of files to track usage/" and
"/Fingerprint all archived artifacts/".

** Binaries job configuration (foobar-binaries)

Add a "/Configuration Matrix/" with user-defined Axis titled
"/architecture/" and values "/amd64 i386/", specifying the
architectures that should be built. Choose "/Run each configuration
sequentially/".

In the "/Build/" section add a build step "/Execute shell/" using:

#+BEGIN_EXAMPLE
/usr/bin/build-and-provide-package
#+END_EXAMPLE

Under "/Post-build Actions/" select "/Archive the artifacts/" using:

#+BEGIN_EXAMPLE
*.gz,*.bz2,*.xz,*.deb,*.dsc,*.changes
#+END_EXAMPLE

* Scripts

+ *build-and-provide-package*: searches for newest package version in /${HUDSON_HOME}/userContent/${PACKAGE}-source// and uses the dsc file for building a binary package for the specific /$architecture/ of the matrix build using cowbuilder. The resulting binary package will be installed in reprepro to provide it for usage via APT. i386 builds are binary-only builds (limited to architecture dependent packages) and amd64 builds are binary-only builds (no source files are to be built). With the amd64 build the original dsc file is being installed in reprepro as source package.

+ *generate-git-snapshot*: generates a snapshot version of a Debian package using git-dch. Use 'auto' as command line option to use git-dch's magic to build changelog, without the 'auto' option the version string will be build based on last tag/merge.

+ *generate-local-repository*: scans the current working directory for Debian packages and generates Packages.gz, Contents and Release files. Meant for usage if reprepro would be overkill (e.g. no signed repository is needed).

+ *generate-reprepro-codename*: takes a repository/codename as command line option and adds an according repository/codename definition to /srv/repository/conf/distributions (iff the codename is not present yet). As second command line option the GnuPG key ID for signing the repository can be specified (defaults to a static value otherwise).

+ *generate-svn-snapshot*: generates snapshot version of a Debian package using svn log, svn2cl and some dirty shell magic.

+ *increase-version-number*: takes a version number as commandline argument and raises the version number for usage inside as a new snapshot version. It does not append any special characters (like $BUILD_NUMBER or VCS revisions), so you can use it with your own suffix, build numbers, VCS info, etc.

* FAQ

** How do I use Debian packages which aren't available via Git or Subversion?

TODO: document steps for debcheckout

** How can I add multiple Jenkins jobs for the same software package?

If you need further Jenkins jobs for the same package you can achieve that by
setting the /REPOS/ environment variable. Let's assume you already have the
Jenkins jobs /foobar-source/ and /foobar-binaries/ for a software package called
/foobar/. To use /foobar/ with different settings as project /foobar-testing/
all you've to do is setting the /REPOS/ environment variable inside the build
steps of the Jenkins job. Usage example for /foobar-testing-binaries/:

#+BEGIN_EXAMPLE
REPOS="${JOB_NAME%-testing-binaries*}"
/usr/bin/generate-reprepro-codename "${REPOS}"
#+END_EXAMPLE

* Known TODOs

+ Make sure scaling with slave node works (incl. shared build environments e.g. via NFS chroots)

* Author
Michael Prokop <mika@debian.org>
